// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Investor,
  AuthUser,
  Investment
} from "../../prisma/generated/prisma-client";
import { Context } from "../types/types";

export namespace InvestorResolvers {
  export const defaultResolvers = {
    id: (parent: Investor) => parent.id,
    fistName: (parent: Investor) => parent.fistName,
    lastName: (parent: Investor) => parent.lastName
  };

  export type IdResolver = (
    parent: Investor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AuthResolver = (
    parent: Investor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthUser | Promise<AuthUser>;

  export type FistNameResolver = (
    parent: Investor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LastNameResolver = (
    parent: Investor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type InvestmentsResolver = (
    parent: Investor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Investment[] | null | Promise<Investment[] | null>;

  export interface Type {
    id: (
      parent: Investor,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    auth: (
      parent: Investor,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthUser | Promise<AuthUser>;

    fistName: (
      parent: Investor,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    lastName: (
      parent: Investor,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    investments: (
      parent: Investor,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Investment[] | null | Promise<Investment[] | null>;
  }
}

export namespace AuthUserResolvers {
  export const defaultResolvers = {
    id: (parent: AuthUser) => parent.id,
    token: (parent: AuthUser) => parent.token,
    isActive: (parent: AuthUser) => parent.isActive
  };

  export type IdResolver = (
    parent: AuthUser,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TokenResolver = (
    parent: AuthUser,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IsActiveResolver = (
    parent: AuthUser,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: (
      parent: AuthUser,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    token: (
      parent: AuthUser,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    isActive: (
      parent: AuthUser,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace InvestmentResolvers {
  export const defaultResolvers = {
    id: (parent: Investment) => parent.id,
    companyName: (parent: Investment) => parent.companyName,
    shareAmount: (parent: Investment) => parent.shareAmount,
    amountPerShare: (parent: Investment) => parent.amountPerShare
  };

  export type IdResolver = (
    parent: Investment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CompanyNameResolver = (
    parent: Investment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ShareAmountResolver = (
    parent: Investment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type AmountPerShareResolver = (
    parent: Investment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type InvestorResolver = (
    parent: Investment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Investor | Promise<Investor>;

  export interface Type {
    id: (
      parent: Investment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    companyName: (
      parent: Investment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    shareAmount: (
      parent: Investment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    amountPerShare: (
      parent: Investment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    investor: (
      parent: Investment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Investor | Promise<Investor>;
  }
}

export interface Resolvers {
  Investor: InvestorResolvers.Type;
  AuthUser: AuthUserResolvers.Type;
  Investment: InvestmentResolvers.Type;
}
